package view;

import controller.BookTransactionDao;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import model.BookTransaction;
import java.sql.*;
import java.text.MessageFormat;
import java.text.ParseException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * @author hirwa
 */
public class operationForm extends javax.swing.JInternalFrame {

    public Connection con = null;
    public PreparedStatement ps = null;
    public Statement s = null;
    public ResultSet rs = null;
    
    public operationForm() {
        initComponents();
        updateTableBookTransaction();
        updateClientName();
        updateBookTitle();
    }
    
    public void updateTableBookTransaction(){
        try {
            int i,q;
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library?","root","");
            s = con.createStatement();
            rs = s.executeQuery("SELECT * FROM bookTransaction");
            
            ResultSetMetaData stData = (ResultSetMetaData)rs.getMetaData();
            q = stData.getColumnCount();
            
            DefaultTableModel model = (DefaultTableModel)bookTransactionTable.getModel();
            model.setRowCount(0);
            
            while (rs.next()) {
                
                Vector columnData = new Vector();
                
                for (i=1; i<=q; i++){
                    columnData.add(rs.getString("transactionType"));
                    columnData.add(rs.getString("clientNames"));
                    columnData.add(rs.getString("bookTitle"));
                    columnData.add(rs.getString("transactionDate"));
                }
                model.addRow(columnData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(operationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void updateClientName(){
        try {
            String sql = "SELECT firstName, lastName FROM client";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            while(rs.next()){
                String fname = rs.getString("firstName");
                String lname = rs.getString("lastName");
                clientNameField.addItem(fname+" "+lname);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(operationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    
    }
    
    public void updateBookTitle(){
        try {
            String sql = "SELECT title FROM book";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            
            while(rs.next()){
                String booktitle = rs.getString("title");
                bookTItleFIeld.addItem(booktitle);
            }
        } catch (SQLException ex) {
            Logger.getLogger(operationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
            
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        transactionTypeField = new javax.swing.JComboBox<>();
        clientNameField = new javax.swing.JComboBox<>();
        bookTItleFIeld = new javax.swing.JComboBox<>();
        transactionDateField = new com.toedter.calendar.JDateChooser();
        saveButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        printButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookTransactionTable = new javax.swing.JTable();

        setTitle("Operations");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setText("BOOK TRANSACTIONS");

        jLabel2.setText("Transaction Type");

        jLabel3.setText("Client Names");

        jLabel4.setText("Book Title");

        jLabel5.setText("Transaction Date");

        transactionTypeField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Borrow", "Return" }));

        saveButton.setText("SAVE");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        resetButton.setText("RESET");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("DELETE");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        updateButton.setText("UPDATE");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        exitButton.setText("EXIT");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        printButton.setText("PRINT");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        bookTransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Transaction Type", "Client Names", "Book Title", "Transaction Date"
            }
        ));
        bookTransactionTable.setShowHorizontalLines(false);
        bookTransactionTable.setShowVerticalLines(false);
        bookTransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookTransactionTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bookTransactionTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(transactionDateField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(transactionTypeField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clientNameField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bookTItleFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(120, 120, 120)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(resetButton)
                        .addGap(18, 18, 18)
                        .addComponent(updateButton)
                        .addGap(18, 18, 18)
                        .addComponent(printButton)
                        .addGap(14, 14, 14)
                        .addComponent(deleteButton)
                        .addGap(18, 18, 18)
                        .addComponent(exitButton)))
                .addContainerGap(125, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(transactionTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(clientNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(bookTItleFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(transactionDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(exitButton)
                        .addComponent(deleteButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saveButton)
                        .addComponent(resetButton)
                        .addComponent(updateButton)
                        .addComponent(printButton)))
                .addContainerGap(171, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(275, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        MessageFormat header = new MessageFormat("Printing in Progress...");
        MessageFormat footer = new MessageFormat("Page {0, number, integer}");

        try{
            bookTransactionTable.print(JTable.PrintMode.NORMAL, header, footer);
        }catch(java.awt.print.PrinterException e){
            System.err.format("No printer Found", e.getMessage());
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String transactionType = (String)transactionTypeField.getSelectedItem();
        String clientName = (String)clientNameField.getSelectedItem();
        String bookTitle = (String)bookTItleFIeld.getSelectedItem();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String transactionDate = sdf.format(transactionDateField.getDate());
        
        BookTransaction bt = new BookTransaction(transactionType, clientName, bookTitle, transactionDate);
        BookTransactionDao btd = new BookTransactionDao();
        btd.SaveBookTransaction(bt);
        
        updateTableBookTransaction();
        JOptionPane.showMessageDialog(this, "Successfully saved book transaction");
    }//GEN-LAST:event_saveButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        JFrame frame = new JFrame("Exit");
        if(JOptionPane.showConfirmDialog(frame, "Do you really want to exit?","Book Transaction",JOptionPane.YES_NO_OPTION)==JOptionPane.YES_NO_OPTION){
            System.exit(0);
        }
    }//GEN-LAST:event_exitButtonActionPerformed

    private void bookTransactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookTransactionTableMouseClicked
        try {
            DefaultTableModel model = (DefaultTableModel)bookTransactionTable.getModel();
            int SelectedRows = bookTransactionTable.getSelectedRow();
            
            String transactionType = model.getValueAt(SelectedRows, 0).toString();
            for(int i=0; i<transactionTypeField.getItemCount(); i++){
                if(transactionTypeField.getItemAt(i).toString().equalsIgnoreCase(transactionType)){
                    transactionTypeField.setSelectedIndex(i);
                }
            }
            String clientNames = model.getValueAt(SelectedRows, 1).toString();
            for(int i=0; i<clientNameField.getItemCount(); i++){
                if(clientNameField.getItemAt(i).toString().equalsIgnoreCase(clientNames)){
                    clientNameField.setSelectedIndex(i);
                }
            }
            String bookTitle = model.getValueAt(SelectedRows, 2).toString();
            for(int i=0; i<bookTItleFIeld.getItemCount(); i++){
                if(bookTItleFIeld.getItemAt(i).toString().equalsIgnoreCase(bookTitle)){
                    bookTItleFIeld.setSelectedIndex(i);
                }
            }
            java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)model.getValueAt(SelectedRows, 3));
            transactionDateField.setDate(date);
        } catch (ParseException ex) {
            Logger.getLogger(operationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bookTransactionTableMouseClicked

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        transactionTypeField.setSelectedIndex(0);
        clientNameField.setSelectedIndex(0);
        bookTItleFIeld.setSelectedIndex(0);
        transactionDateField.setDate(null);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            DefaultTableModel record = (DefaultTableModel)bookTransactionTable.getModel();
            int SelectedRows = bookTransactionTable.getSelectedRow();

            int id = Integer.parseInt(record.getValueAt(SelectedRows, 0).toString());
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library?","root","");
            s = con.createStatement();
            ps = con.prepareStatement("UPDATE bookTransaction SET transactionType=?, clientNames=?, bookTitle=?, transactionDate=? WHERE clientNames=? AND transactionType=?");

            ps.setString(1, (String)transactionTypeField.getSelectedItem());
            ps.setString(2, (String)clientNameField.getSelectedItem());
            ps.setString(3, (String)bookTItleFIeld.getSelectedItem());
            ps.setString(4, transactionDateField.getDateFormatString());
            ps.setInt(5, id);
            
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Operation Record successfully updated!!");
            updateTableBookTransaction();
            
        } catch (SQLException ex) {
            Logger.getLogger(operationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> bookTItleFIeld;
    private javax.swing.JTable bookTransactionTable;
    private javax.swing.JComboBox<String> clientNameField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton printButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveButton;
    private com.toedter.calendar.JDateChooser transactionDateField;
    private javax.swing.JComboBox<String> transactionTypeField;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
